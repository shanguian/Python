# 代码编写者：左宝良
#不可变序列，可变序列
#可变序列  列表、字典
'''lst=[10,20,30]
print(id(lst))
lst.append(300)
print(id(lst))
不可变序列  字符串、元组
s='hello'
print(id(s))
s=s+'world'
print(id(s))
print(s)'''

#元组的创建方式
#第一种，使用（）
t=('Python','world',98)
print(t)
print(type(t))
#小括号可以省略，只有第一种
t2='PYt'
print(t2)
print(type(t2))
#如果元组只有一个元素时，加逗号
t3=('hhhh',)
print(t3)
print(type(t3))

#第二种创建方式，使用内置函数tuple()
t1=tuple(('py','hello',38))
print(t1)
print(type(t1))

#空元组的创建方式
lst=[]
lst1=list()

d={}
d2=dict()

t4=()
t5=tuple()
print('空列表',lst,lst1)
print('空字典',d,d2)
print('空元组',t4,t5)

t=(10,[20,30],9)
print(t)
print(type(t))
print(t[0],type(t[0]),id(t[0]))
print(t[1],type(t[1]),id(t[1]))
print(t[2],type(t[2]),id(t[2]))

'''尝试将t[1]修改为100'''
print(id(100))
#t[1]=100,不允许修改
'''由于[20,30]是列表，可以向列表添加元素'''
t[1].append(100)
print(t,id(t[1]))

#元组的遍历
t1=('Py','hello',98)
print(t1[0])
print(t1[1])
print(t1[2])
for i in t1:
    print(t1)
    
    #集合的创建方式

#第一种创建方式使用{}
s={2,3,4,5,5,6,7,7}#集合中的元素不允许重复
print(s)

#第二种创建方式，内置函数set()
s1=set(range(6))
print(s1,type(s1))

s2=set([1,2,3,4,5])
print(s2,type(s2))

s3=set((3,4,5,6,65))#集合中的元素时无序的
print(s3,type(s3))#元组

s4=set('python')
print(s4,type(s4))

s5=set({12,3,4,55,66,7})
print(s5,type(s5))

#定义一个空集合
s6={}
print(type(s6))#不行
s7=set()
print(s7,type(s7))

#集合的相关操作
s={10,20,30,40,50}
#判断操作
print(10 in s)
print(100 in s)
print(10 not in s)
print(100 not in s)

#新增操作
s.add(80)#一次添加一个
print(s)
s.update({200,400,433})#一次至少添加一个元素
print(s)
s.update([100,55])
s.update((68,64))
print(s)

#删除操作
s.remove(100)#一次删除一个,删除元素不存在，则抛出异常
print(s)
s.discard(1000)#没有，也不会报错
s.pop()#一次删除任意一个元素
print(s)
#s.pop(400)不能有参数
s.clear()#清空集合中的元素
print(s)

#集合间的关系
s={10,20,30,40}
s2={30,40,20,10}
print(s==s2)
print(s!=s2)#顺序无所谓，元素要相等

#子集
s1={10,20,40,30,50,60}
s2={10,20,30,40}
s3={10,20,90}
print(s2.issubset(s1))
print(s3.issubset(s1))

#超集
print(s1.issuperset(s2))#True
print(s1.issuperset(s3))#False

#交集
print(s2.isdisjoint(s3))#False,有交集
s4={100,200,300}
print(s2.isdisjoint(s4))#True，没有交集

#集合的数学操作
#交集
s1={10,20,30,40}
s2={20,30,40,50,60}
print(s1.intersection(s2))
print(s1 & s2)#交集
print(s1)
print(s2)

#并集
print(s1.union(s2))
print(s1 | s2)#并集操作，等价
print(s1)
print(s2)

#差集
print(s1.difference(s2))
print(s1-s2)
print(s1)
print(s2)

#对称差集
print(s1.symmetric_difference(s2))
print(s1^s2)

#集合生成式
#列表生成式
lst=[i*i for i in range(6)]
print(lst)

#集合生成式
s={i*i for i in range(6)}
print(s)

s={i*i for i in range(10)}
print(s)
